// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package oapi

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	uuid "github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ActorAuthScopes = "actorAuth.Scopes"
)

// Defines values for ReactionType.
const (
	Dislike ReactionType = "dislike"
	Like    ReactionType = "like"
)

// Actor defines model for Actor.
type Actor struct {
	Id       *UUID                `json:"id,omitempty"`
	Jwt      *string              `json:"jwt,omitempty"`
	Mail     *openapi_types.Email `json:"mail,omitempty"`
	Nickname *string              `json:"nickname,omitempty"`
	Roles    *[]string            `json:"roles,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Code HTTP status code
	Code *int `json:"code,omitempty"`

	// Error Error message
	Error *string `json:"error,omitempty"`
}

// Event defines model for Event.
type Event struct {
	CreatedAt    *time.Time `json:"created_at,omitempty"`
	Date         *time.Time `json:"date,omitempty"`
	Id           *int       `json:"id,omitempty"`
	Location     *string    `json:"location,omitempty"`
	LocationLink *string    `json:"location_link,omitempty"`
	Name         *string    `json:"name,omitempty"`
	Participants *[]UUID    `json:"participants,omitempty"`
	PhotoUrl     *string    `json:"photo_url,omitempty"`
	PhotosUrls   *[]string  `json:"photos_urls,omitempty"`
	Text         *string    `json:"text,omitempty"`
	TicketLink   *string    `json:"ticket_link,omitempty"`
	UpdatedAt    *time.Time `json:"updated_at,omitempty"`
}

// IDPagination defines model for IDPagination.
type IDPagination struct {
	LastId *int `json:"last_id,omitempty"`
	Limit  *int `json:"limit,omitempty"`
}

// Note defines model for Note.
type Note struct {
	CreatedAt  *time.Time `json:"created_at,omitempty"`
	Id         *int       `json:"id,omitempty"`
	PhotoUrl   *string    `json:"photo_url,omitempty"`
	SourceId   *int       `json:"source_id,omitempty"`
	SourceType *string    `json:"source_type,omitempty"`
	Text       *string    `json:"text,omitempty"`
	UpdatedAt  *time.Time `json:"updated_at,omitempty"`
}

// Photo defines model for Photo.
type Photo struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        *UUID      `json:"id,omitempty"`
	PhotoUrl  *string    `json:"photo_url,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Profile defines model for Profile.
type Profile struct {
	AvatarUrl     *string    `json:"avatar_url,omitempty"`
	BackgroundUrl *string    `json:"background_url,omitempty"`
	Bio           *string    `json:"bio,omitempty"`
	CreatedAt     *time.Time `json:"created_at,omitempty"`
	Id            *UUID      `json:"id,omitempty"`
	Nickname      *string    `json:"nickname,omitempty"`
	UpdatedAt     *time.Time `json:"updated_at,omitempty"`
}

// ProfileStats defines model for ProfileStats.
type ProfileStats struct {
	TotalCommentsCount  *int `json:"total_comments_count,omitempty"`
	TotalDislikesCount  *int `json:"total_dislikes_count,omitempty"`
	TotalFollowersCount *int `json:"total_followers_count,omitempty"`
	TotalFollowingCount *int `json:"total_following_count,omitempty"`
	TotalLikesCount     *int `json:"total_likes_count,omitempty"`
	TotalPlaylistsCount *int `json:"total_playlists_count,omitempty"`
	TotalReviewsCount   *int `json:"total_reviews_count,omitempty"`
}

// Reaction defines model for Reaction.
type Reaction struct {
	CreatedAt *time.Time    `json:"created_at,omitempty"`
	Id        *int          `json:"id,omitempty"`
	ReviewId  *int          `json:"review_id,omitempty"`
	Type      *ReactionType `json:"type,omitempty"`
	UpdatedAt *time.Time    `json:"updated_at,omitempty"`
	UserId    *UUID         `json:"user_id,omitempty"`
}

// ReactionType defines model for Reaction.Type.
type ReactionType string

// ReactionCount defines model for ReactionCount.
type ReactionCount struct {
	Dislikes *int `json:"dislikes,omitempty"`
	Likes    *int `json:"likes,omitempty"`
}

// Review defines model for Review.
type Review struct {
	Content   *string    `json:"content,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        *int       `json:"id,omitempty"`
	Moderated *bool      `json:"moderated,omitempty"`
	PhotoUrl  *string    `json:"photo_url,omitempty"`
	PieceId   *string    `json:"piece_id,omitempty"`
	Profile   *Profile   `json:"profile,omitempty"`
	Published *bool      `json:"published,omitempty"`
	Rating    *int       `json:"rating,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	UserId    *UUID      `json:"user_id,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	CreatedAt         *time.Time `json:"created_at,omitempty"`
	Id                *int       `json:"id,omitempty"`
	NotificationFlag  *bool      `json:"notification_flag,omitempty"`
	ProfileOfInterest *Profile   `json:"profile_of_interest,omitempty"`
	SubscribedToId    *UUID      `json:"subscribed_to_id,omitempty"`
	SubscriberId      *UUID      `json:"subscriber_id,omitempty"`
	UpdatedAt         *time.Time `json:"updated_at,omitempty"`
}

// TrackStats defines model for TrackStats.
type TrackStats struct {
	TotalCommentsCount *int `json:"total_comments_count,omitempty"`
	TotalDislikesCount *int `json:"total_dislikes_count,omitempty"`
	TotalLikesCount    *int `json:"total_likes_count,omitempty"`
	TotalReviewsCount  *int `json:"total_reviews_count,omitempty"`
}

// UUID defines model for UUID.
type UUID = uuid.UUID

// UUIDPagination defines model for UUIDPagination.
type UUIDPagination struct {
	LastUuid *UUID `json:"last_uuid,omitempty"`
	Limit    *int  `json:"limit,omitempty"`
}

// User defines model for User.
type User struct {
	AvatarUrl     *string              `json:"avatar_url,omitempty"`
	BackgroundUrl *string              `json:"background_url,omitempty"`
	Bio           *string              `json:"bio,omitempty"`
	CreatedAt     *time.Time           `json:"created_at,omitempty"`
	Email         *openapi_types.Email `json:"email,omitempty"`
	Id            *UUID                `json:"id,omitempty"`
	Nickname      *string              `json:"nickname,omitempty"`
	Roles         *[]string            `json:"roles,omitempty"`
	UpdatedAt     *time.Time           `json:"updated_at,omitempty"`
}

// PostAuthLoginJSONBody defines parameters for PostAuthLogin.
type PostAuthLoginJSONBody struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// PostAuthLoginParams defines parameters for PostAuthLogin.
type PostAuthLoginParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// PostAuthLogoutParams defines parameters for PostAuthLogout.
type PostAuthLogoutParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// PostAuthRegisterJSONBody defines parameters for PostAuthRegister.
type PostAuthRegisterJSONBody struct {
	Password *string `json:"password,omitempty"`
	User     *User   `json:"user,omitempty"`
}

// GetEventsParams defines parameters for GetEvents.
type GetEventsParams struct {
	NameQuery       *string    `form:"name_query,omitempty" json:"name_query,omitempty"`
	DateLeftBound   *time.Time `form:"date_left_bound,omitempty" json:"date_left_bound,omitempty"`
	DateRightBound  *time.Time `form:"date_right_bound,omitempty" json:"date_right_bound,omitempty"`
	SortByCreatedAt *bool      `form:"sort_by_created_at,omitempty" json:"sort_by_created_at,omitempty"`
	SortByAmount    *bool      `form:"sort_by_amount,omitempty" json:"sort_by_amount,omitempty"`
	Actor           *Actor     `json:"actor,omitempty"`
}

// PostEventsParams defines parameters for PostEvents.
type PostEventsParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// GetEventsEventIdParams defines parameters for GetEventsEventId.
type GetEventsEventIdParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// PutEventsEventIdParams defines parameters for PutEventsEventId.
type PutEventsEventIdParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// PostEventsEventIdParticipateParams defines parameters for PostEventsEventIdParticipate.
type PostEventsEventIdParticipateParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// PostNotesParams defines parameters for PostNotes.
type PostNotesParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// DeleteNotesNoteIdParams defines parameters for DeleteNotesNoteId.
type DeleteNotesNoteIdParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// GetNotesNoteIdParams defines parameters for GetNotesNoteId.
type GetNotesNoteIdParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// PutNotesNoteIdParams defines parameters for PutNotesNoteId.
type PutNotesNoteIdParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// PostPhotosMultipartBody defines parameters for PostPhotos.
type PostPhotosMultipartBody struct {
	File openapi_types.File `json:"file"`
}

// PostPhotosParams defines parameters for PostPhotos.
type PostPhotosParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// DeletePhotosPhotoIdParams defines parameters for DeletePhotosPhotoId.
type DeletePhotosPhotoIdParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// GetPhotosPhotoIdParams defines parameters for GetPhotosPhotoId.
type GetPhotosPhotoIdParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// GetPlaylistsPlaylistIdNotesParams defines parameters for GetPlaylistsPlaylistIdNotes.
type GetPlaylistsPlaylistIdNotesParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// DeleteReactionsReactionIdParams defines parameters for DeleteReactionsReactionId.
type DeleteReactionsReactionIdParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// PutReactionsReactionIdParams defines parameters for PutReactionsReactionId.
type PutReactionsReactionIdParams struct {
	// Type Type of reaction to add ("like" or "dislike")
	Type  string `form:"type" json:"type"`
	Actor *Actor `json:"actor,omitempty"`
}

// PostReviewsParams defines parameters for PostReviews.
type PostReviewsParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// GetReviewsListParams defines parameters for GetReviewsList.
type GetReviewsListParams struct {
	UserId          *UUID   `form:"user_id,omitempty" json:"user_id,omitempty"`
	PieceId         *string `form:"piece_id,omitempty" json:"piece_id,omitempty"`
	Rating          *int    `form:"rating,omitempty" json:"rating,omitempty"`
	Moderated       *bool   `form:"moderated,omitempty" json:"moderated,omitempty"`
	Published       *bool   `form:"published,omitempty" json:"published,omitempty"`
	IncludeProfiles *bool   `form:"include_profiles,omitempty" json:"include_profiles,omitempty"`
	Limit           *int    `form:"limit,omitempty" json:"limit,omitempty"`
	LastId          *int    `form:"last_id,omitempty" json:"last_id,omitempty"`
	Actor           *Actor  `json:"actor,omitempty"`
}

// GetReviewsSubscriptionsParams defines parameters for GetReviewsSubscriptions.
type GetReviewsSubscriptionsParams struct {
	PieceId         *string `form:"piece_id,omitempty" json:"piece_id,omitempty"`
	Rating          *int    `form:"rating,omitempty" json:"rating,omitempty"`
	Moderated       *bool   `form:"moderated,omitempty" json:"moderated,omitempty"`
	Published       *bool   `form:"published,omitempty" json:"published,omitempty"`
	IncludeProfiles *bool   `form:"include_profiles,omitempty" json:"include_profiles,omitempty"`
	Limit           *int    `form:"limit,omitempty" json:"limit,omitempty"`
	LastId          *int    `form:"last_id,omitempty" json:"last_id,omitempty"`
	Actor           *Actor  `json:"actor,omitempty"`
}

// DeleteReviewsReviewIdParams defines parameters for DeleteReviewsReviewId.
type DeleteReviewsReviewIdParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// GetReviewsReviewIdParams defines parameters for GetReviewsReviewId.
type GetReviewsReviewIdParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// PutReviewsReviewIdParams defines parameters for PutReviewsReviewId.
type PutReviewsReviewIdParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// GetReviewsReviewIdNotesParams defines parameters for GetReviewsReviewIdNotes.
type GetReviewsReviewIdNotesParams struct {
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
	LastId *int   `form:"last_id,omitempty" json:"last_id,omitempty"`
	Actor  *Actor `json:"actor,omitempty"`
}

// GetReviewsReviewIdReactionsParams defines parameters for GetReviewsReviewIdReactions.
type GetReviewsReviewIdReactionsParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// PostReviewsReviewIdReactionsParams defines parameters for PostReviewsReviewIdReactions.
type PostReviewsReviewIdReactionsParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// GetReviewsReviewIdReactionsMeParams defines parameters for GetReviewsReviewIdReactionsMe.
type GetReviewsReviewIdReactionsMeParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// PostSubscriptionsParams defines parameters for PostSubscriptions.
type PostSubscriptionsParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// DeleteSubscriptionsFollowedIdParams defines parameters for DeleteSubscriptionsFollowedId.
type DeleteSubscriptionsFollowedIdParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// GetSubscriptionsFollowedIdParams defines parameters for GetSubscriptionsFollowedId.
type GetSubscriptionsFollowedIdParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// PutSubscriptionsFollowedIdJSONBody defines parameters for PutSubscriptionsFollowedId.
type PutSubscriptionsFollowedIdJSONBody struct {
	NotificationFlag *bool `json:"notification_flag,omitempty"`
}

// PutSubscriptionsFollowedIdParams defines parameters for PutSubscriptionsFollowedId.
type PutSubscriptionsFollowedIdParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// GetTracksTrackIdStatsParams defines parameters for GetTracksTrackIdStats.
type GetTracksTrackIdStatsParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// PostUsersJSONBody defines parameters for PostUsers.
type PostUsersJSONBody struct {
	Password *string `json:"password,omitempty"`
	User     *User   `json:"user,omitempty"`
}

// PostUsersParams defines parameters for PostUsers.
type PostUsersParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// GetUsersProfilesParams defines parameters for GetUsersProfiles.
type GetUsersProfilesParams struct {
	NicknameQuery *string `form:"nickname_query,omitempty" json:"nickname_query,omitempty"`
	Limit         *int    `form:"limit,omitempty" json:"limit,omitempty"`
	LastUuid      *UUID   `form:"last_uuid,omitempty" json:"last_uuid,omitempty"`
	Actor         *Actor  `json:"actor,omitempty"`
}

// GetUsersUserIdParams defines parameters for GetUsersUserId.
type GetUsersUserIdParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// PutUsersUserIdParams defines parameters for PutUsersUserId.
type PutUsersUserIdParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// PostUsersUserIdBlockParams defines parameters for PostUsersUserIdBlock.
type PostUsersUserIdBlockParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// GetUsersUserIdProfileParams defines parameters for GetUsersUserIdProfile.
type GetUsersUserIdProfileParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// PutUsersUserIdProfileParams defines parameters for PutUsersUserIdProfile.
type PutUsersUserIdProfileParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// GetUsersUserIdStatsParams defines parameters for GetUsersUserIdStats.
type GetUsersUserIdStatsParams struct {
	Actor *Actor `json:"actor,omitempty"`
}

// GetUsersUserIdSubscribersParams defines parameters for GetUsersUserIdSubscribers.
type GetUsersUserIdSubscribersParams struct {
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
	LastId *int   `form:"last_id,omitempty" json:"last_id,omitempty"`
	Actor  *Actor `json:"actor,omitempty"`
}

// GetUsersUserIdSubscriptionsParams defines parameters for GetUsersUserIdSubscriptions.
type GetUsersUserIdSubscriptionsParams struct {
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
	LastId *int   `form:"last_id,omitempty" json:"last_id,omitempty"`
	Actor  *Actor `json:"actor,omitempty"`
}

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody PostAuthLoginJSONBody

// PostAuthRegisterJSONRequestBody defines body for PostAuthRegister for application/json ContentType.
type PostAuthRegisterJSONRequestBody PostAuthRegisterJSONBody

// PostEventsJSONRequestBody defines body for PostEvents for application/json ContentType.
type PostEventsJSONRequestBody = Event

// PutEventsEventIdJSONRequestBody defines body for PutEventsEventId for application/json ContentType.
type PutEventsEventIdJSONRequestBody = Event

// PostNotesJSONRequestBody defines body for PostNotes for application/json ContentType.
type PostNotesJSONRequestBody = Note

// PutNotesNoteIdJSONRequestBody defines body for PutNotesNoteId for application/json ContentType.
type PutNotesNoteIdJSONRequestBody = Note

// PostPhotosMultipartRequestBody defines body for PostPhotos for multipart/form-data ContentType.
type PostPhotosMultipartRequestBody PostPhotosMultipartBody

// PostReviewsJSONRequestBody defines body for PostReviews for application/json ContentType.
type PostReviewsJSONRequestBody = Review

// PutReviewsReviewIdJSONRequestBody defines body for PutReviewsReviewId for application/json ContentType.
type PutReviewsReviewIdJSONRequestBody = Review

// PostReviewsReviewIdReactionsJSONRequestBody defines body for PostReviewsReviewIdReactions for application/json ContentType.
type PostReviewsReviewIdReactionsJSONRequestBody = Reaction

// PostSubscriptionsJSONRequestBody defines body for PostSubscriptions for application/json ContentType.
type PostSubscriptionsJSONRequestBody = Subscription

// PutSubscriptionsFollowedIdJSONRequestBody defines body for PutSubscriptionsFollowedId for application/json ContentType.
type PutSubscriptionsFollowedIdJSONRequestBody PutSubscriptionsFollowedIdJSONBody

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody PostUsersJSONBody

// PutUsersUserIdJSONRequestBody defines body for PutUsersUserId for application/json ContentType.
type PutUsersUserIdJSONRequestBody = User

// PutUsersUserIdProfileJSONRequestBody defines body for PutUsersUserIdProfile for application/json ContentType.
type PutUsersUserIdProfileJSONRequestBody = Profile

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Login user
	// (POST /auth/login)
	PostAuthLogin(c *gin.Context, params PostAuthLoginParams)
	// Logout user
	// (POST /auth/logout)
	PostAuthLogout(c *gin.Context, params PostAuthLogoutParams)
	// Register a new user
	// (POST /auth/register)
	PostAuthRegister(c *gin.Context)
	// List events
	// (GET /events)
	GetEvents(c *gin.Context, params GetEventsParams)
	// Create a new event
	// (POST /events)
	PostEvents(c *gin.Context, params PostEventsParams)
	// Get event
	// (GET /events/{event_id})
	GetEventsEventId(c *gin.Context, eventId int, params GetEventsEventIdParams)
	// Update event
	// (PUT /events/{event_id})
	PutEventsEventId(c *gin.Context, eventId int, params PutEventsEventIdParams)
	// Participate in event
	// (POST /events/{event_id}/participate)
	PostEventsEventIdParticipate(c *gin.Context, eventId int, params PostEventsEventIdParticipateParams)
	// Create note
	// (POST /notes)
	PostNotes(c *gin.Context, params PostNotesParams)
	// Delete note
	// (DELETE /notes/{note_id})
	DeleteNotesNoteId(c *gin.Context, noteId int, params DeleteNotesNoteIdParams)
	// Get note
	// (GET /notes/{note_id})
	GetNotesNoteId(c *gin.Context, noteId int, params GetNotesNoteIdParams)
	// Update note
	// (PUT /notes/{note_id})
	PutNotesNoteId(c *gin.Context, noteId int, params PutNotesNoteIdParams)
	// Upload photo
	// (POST /photos)
	PostPhotos(c *gin.Context, params PostPhotosParams)
	// Delete photo
	// (DELETE /photos/{photo_id})
	DeletePhotosPhotoId(c *gin.Context, photoId UUID, params DeletePhotosPhotoIdParams)
	// Get photo
	// (GET /photos/{photo_id})
	GetPhotosPhotoId(c *gin.Context, photoId UUID, params GetPhotosPhotoIdParams)
	// Get playlist notes
	// (GET /playlists/{playlist_id}/notes)
	GetPlaylistsPlaylistIdNotes(c *gin.Context, playlistId int, params GetPlaylistsPlaylistIdNotesParams)
	// Remove reaction
	// (DELETE /reactions/{reaction_id})
	DeleteReactionsReactionId(c *gin.Context, reactionId int, params DeleteReactionsReactionIdParams)
	// Change reaction to review
	// (PUT /reactions/{reaction_id})
	PutReactionsReactionId(c *gin.Context, reactionId int, params PutReactionsReactionIdParams)
	// Create a new review
	// (POST /reviews)
	PostReviews(c *gin.Context, params PostReviewsParams)
	// List reviews
	// (GET /reviews/list)
	GetReviewsList(c *gin.Context, params GetReviewsListParams)
	// Get reviews from subscriptions
	// (GET /reviews/subscriptions)
	GetReviewsSubscriptions(c *gin.Context, params GetReviewsSubscriptionsParams)
	// Delete review
	// (DELETE /reviews/{review_id})
	DeleteReviewsReviewId(c *gin.Context, reviewId int, params DeleteReviewsReviewIdParams)
	// Get review
	// (GET /reviews/{review_id})
	GetReviewsReviewId(c *gin.Context, reviewId int, params GetReviewsReviewIdParams)
	// Update review
	// (PUT /reviews/{review_id})
	PutReviewsReviewId(c *gin.Context, reviewId int, params PutReviewsReviewIdParams)
	// Get review notes
	// (GET /reviews/{review_id}/notes)
	GetReviewsReviewIdNotes(c *gin.Context, reviewId int, params GetReviewsReviewIdNotesParams)
	// Get reaction count
	// (GET /reviews/{review_id}/reactions)
	GetReviewsReviewIdReactions(c *gin.Context, reviewId int, params GetReviewsReviewIdReactionsParams)
	// Add reaction to review
	// (POST /reviews/{review_id}/reactions)
	PostReviewsReviewIdReactions(c *gin.Context, reviewId int, params PostReviewsReviewIdReactionsParams)
	// Get user's reaction
	// (GET /reviews/{review_id}/reactions/me)
	GetReviewsReviewIdReactionsMe(c *gin.Context, reviewId int, params GetReviewsReviewIdReactionsMeParams)
	// Create a new subscription
	// (POST /subscriptions)
	PostSubscriptions(c *gin.Context, params PostSubscriptionsParams)
	// Delete subscription
	// (DELETE /subscriptions/{followed_id})
	DeleteSubscriptionsFollowedId(c *gin.Context, followedId UUID, params DeleteSubscriptionsFollowedIdParams)
	// Get subscription
	// (GET /subscriptions/{followed_id})
	GetSubscriptionsFollowedId(c *gin.Context, followedId UUID, params GetSubscriptionsFollowedIdParams)
	// Update subscription
	// (PUT /subscriptions/{followed_id})
	PutSubscriptionsFollowedId(c *gin.Context, followedId UUID, params PutSubscriptionsFollowedIdParams)
	// Get track statistics
	// (GET /tracks/{track_id}/stats)
	GetTracksTrackIdStats(c *gin.Context, trackId string, params GetTracksTrackIdStatsParams)
	// Create a new user (admin only)
	// (POST /users)
	PostUsers(c *gin.Context, params PostUsersParams)
	// Search user profiles
	// (GET /users/profiles)
	GetUsersProfiles(c *gin.Context, params GetUsersProfilesParams)
	// Get user by ID
	// (GET /users/{user_id})
	GetUsersUserId(c *gin.Context, userId UUID, params GetUsersUserIdParams)
	// Update user
	// (PUT /users/{user_id})
	PutUsersUserId(c *gin.Context, userId UUID, params PutUsersUserIdParams)
	// Block user
	// (POST /users/{user_id}/block)
	PostUsersUserIdBlock(c *gin.Context, userId UUID, params PostUsersUserIdBlockParams)
	// Get user profile
	// (GET /users/{user_id}/profile)
	GetUsersUserIdProfile(c *gin.Context, userId UUID, params GetUsersUserIdProfileParams)
	// Update user profile
	// (PUT /users/{user_id}/profile)
	PutUsersUserIdProfile(c *gin.Context, userId UUID, params PutUsersUserIdProfileParams)
	// Get user profile statistics
	// (GET /users/{user_id}/stats)
	GetUsersUserIdStats(c *gin.Context, userId UUID, params GetUsersUserIdStatsParams)
	// Get user subscribers
	// (GET /users/{user_id}/subscribers)
	GetUsersUserIdSubscribers(c *gin.Context, userId UUID, params GetUsersUserIdSubscribersParams)
	// Get user subscriptions
	// (GET /users/{user_id}/subscriptions)
	GetUsersUserIdSubscriptions(c *gin.Context, userId UUID, params GetUsersUserIdSubscriptionsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostAuthLogin operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogin(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthLoginParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthLogin(c, params)
}

// PostAuthLogout operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogout(c *gin.Context) {

	var err error

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthLogoutParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthLogout(c, params)
}

// PostAuthRegister operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRegister(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthRegister(c)
}

// GetEvents operation middleware
func (siw *ServerInterfaceWrapper) GetEvents(c *gin.Context) {

	var err error

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventsParams

	// ------------- Optional query parameter "name_query" -------------

	err = runtime.BindQueryParameter("form", true, false, "name_query", c.Request.URL.Query(), &params.NameQuery)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name_query: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "date_left_bound" -------------

	err = runtime.BindQueryParameter("form", true, false, "date_left_bound", c.Request.URL.Query(), &params.DateLeftBound)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date_left_bound: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "date_right_bound" -------------

	err = runtime.BindQueryParameter("form", true, false, "date_right_bound", c.Request.URL.Query(), &params.DateRightBound)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date_right_bound: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort_by_created_at" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by_created_at", c.Request.URL.Query(), &params.SortByCreatedAt)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort_by_created_at: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort_by_amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by_amount", c.Request.URL.Query(), &params.SortByAmount)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort_by_amount: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEvents(c, params)
}

// PostEvents operation middleware
func (siw *ServerInterfaceWrapper) PostEvents(c *gin.Context) {

	var err error

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostEventsParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostEvents(c, params)
}

// GetEventsEventId operation middleware
func (siw *ServerInterfaceWrapper) GetEventsEventId(c *gin.Context) {

	var err error

	// ------------- Path parameter "event_id" -------------
	var eventId int

	err = runtime.BindStyledParameter("simple", false, "event_id", c.Param("event_id"), &eventId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter event_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventsEventIdParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEventsEventId(c, eventId, params)
}

// PutEventsEventId operation middleware
func (siw *ServerInterfaceWrapper) PutEventsEventId(c *gin.Context) {

	var err error

	// ------------- Path parameter "event_id" -------------
	var eventId int

	err = runtime.BindStyledParameter("simple", false, "event_id", c.Param("event_id"), &eventId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter event_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutEventsEventIdParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutEventsEventId(c, eventId, params)
}

// PostEventsEventIdParticipate operation middleware
func (siw *ServerInterfaceWrapper) PostEventsEventIdParticipate(c *gin.Context) {

	var err error

	// ------------- Path parameter "event_id" -------------
	var eventId int

	err = runtime.BindStyledParameter("simple", false, "event_id", c.Param("event_id"), &eventId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter event_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostEventsEventIdParticipateParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostEventsEventIdParticipate(c, eventId, params)
}

// PostNotes operation middleware
func (siw *ServerInterfaceWrapper) PostNotes(c *gin.Context) {

	var err error

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNotesParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostNotes(c, params)
}

// DeleteNotesNoteId operation middleware
func (siw *ServerInterfaceWrapper) DeleteNotesNoteId(c *gin.Context) {

	var err error

	// ------------- Path parameter "note_id" -------------
	var noteId int

	err = runtime.BindStyledParameter("simple", false, "note_id", c.Param("note_id"), &noteId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter note_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteNotesNoteIdParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteNotesNoteId(c, noteId, params)
}

// GetNotesNoteId operation middleware
func (siw *ServerInterfaceWrapper) GetNotesNoteId(c *gin.Context) {

	var err error

	// ------------- Path parameter "note_id" -------------
	var noteId int

	err = runtime.BindStyledParameter("simple", false, "note_id", c.Param("note_id"), &noteId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter note_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNotesNoteIdParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNotesNoteId(c, noteId, params)
}

// PutNotesNoteId operation middleware
func (siw *ServerInterfaceWrapper) PutNotesNoteId(c *gin.Context) {

	var err error

	// ------------- Path parameter "note_id" -------------
	var noteId int

	err = runtime.BindStyledParameter("simple", false, "note_id", c.Param("note_id"), &noteId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter note_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutNotesNoteIdParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutNotesNoteId(c, noteId, params)
}

// PostPhotos operation middleware
func (siw *ServerInterfaceWrapper) PostPhotos(c *gin.Context) {

	var err error

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostPhotosParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostPhotos(c, params)
}

// DeletePhotosPhotoId operation middleware
func (siw *ServerInterfaceWrapper) DeletePhotosPhotoId(c *gin.Context) {

	var err error

	// ------------- Path parameter "photo_id" -------------
	var photoId UUID

	err = runtime.BindStyledParameter("simple", false, "photo_id", c.Param("photo_id"), &photoId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter photo_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeletePhotosPhotoIdParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePhotosPhotoId(c, photoId, params)
}

// GetPhotosPhotoId operation middleware
func (siw *ServerInterfaceWrapper) GetPhotosPhotoId(c *gin.Context) {

	var err error

	// ------------- Path parameter "photo_id" -------------
	var photoId UUID

	err = runtime.BindStyledParameter("simple", false, "photo_id", c.Param("photo_id"), &photoId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter photo_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPhotosPhotoIdParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPhotosPhotoId(c, photoId, params)
}

// GetPlaylistsPlaylistIdNotes operation middleware
func (siw *ServerInterfaceWrapper) GetPlaylistsPlaylistIdNotes(c *gin.Context) {

	var err error

	// ------------- Path parameter "playlist_id" -------------
	var playlistId int

	err = runtime.BindStyledParameter("simple", false, "playlist_id", c.Param("playlist_id"), &playlistId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter playlist_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPlaylistsPlaylistIdNotesParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPlaylistsPlaylistIdNotes(c, playlistId, params)
}

// DeleteReactionsReactionId operation middleware
func (siw *ServerInterfaceWrapper) DeleteReactionsReactionId(c *gin.Context) {

	var err error

	// ------------- Path parameter "reaction_id" -------------
	var reactionId int

	err = runtime.BindStyledParameter("simple", false, "reaction_id", c.Param("reaction_id"), &reactionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter reaction_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteReactionsReactionIdParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteReactionsReactionId(c, reactionId, params)
}

// PutReactionsReactionId operation middleware
func (siw *ServerInterfaceWrapper) PutReactionsReactionId(c *gin.Context) {

	var err error

	// ------------- Path parameter "reaction_id" -------------
	var reactionId int

	err = runtime.BindStyledParameter("simple", false, "reaction_id", c.Param("reaction_id"), &reactionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter reaction_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutReactionsReactionIdParams

	// ------------- Required query parameter "type" -------------

	if paramValue := c.Query("type"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument type is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutReactionsReactionId(c, reactionId, params)
}

// PostReviews operation middleware
func (siw *ServerInterfaceWrapper) PostReviews(c *gin.Context) {

	var err error

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostReviewsParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostReviews(c, params)
}

// GetReviewsList operation middleware
func (siw *ServerInterfaceWrapper) GetReviewsList(c *gin.Context) {

	var err error

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetReviewsListParams

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "piece_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "piece_id", c.Request.URL.Query(), &params.PieceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter piece_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "rating" -------------

	err = runtime.BindQueryParameter("form", true, false, "rating", c.Request.URL.Query(), &params.Rating)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter rating: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "moderated" -------------

	err = runtime.BindQueryParameter("form", true, false, "moderated", c.Request.URL.Query(), &params.Moderated)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter moderated: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "published" -------------

	err = runtime.BindQueryParameter("form", true, false, "published", c.Request.URL.Query(), &params.Published)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter published: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "include_profiles" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_profiles", c.Request.URL.Query(), &params.IncludeProfiles)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter include_profiles: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "last_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "last_id", c.Request.URL.Query(), &params.LastId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter last_id: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetReviewsList(c, params)
}

// GetReviewsSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) GetReviewsSubscriptions(c *gin.Context) {

	var err error

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetReviewsSubscriptionsParams

	// ------------- Optional query parameter "piece_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "piece_id", c.Request.URL.Query(), &params.PieceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter piece_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "rating" -------------

	err = runtime.BindQueryParameter("form", true, false, "rating", c.Request.URL.Query(), &params.Rating)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter rating: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "moderated" -------------

	err = runtime.BindQueryParameter("form", true, false, "moderated", c.Request.URL.Query(), &params.Moderated)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter moderated: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "published" -------------

	err = runtime.BindQueryParameter("form", true, false, "published", c.Request.URL.Query(), &params.Published)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter published: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "include_profiles" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_profiles", c.Request.URL.Query(), &params.IncludeProfiles)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter include_profiles: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "last_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "last_id", c.Request.URL.Query(), &params.LastId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter last_id: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetReviewsSubscriptions(c, params)
}

// DeleteReviewsReviewId operation middleware
func (siw *ServerInterfaceWrapper) DeleteReviewsReviewId(c *gin.Context) {

	var err error

	// ------------- Path parameter "review_id" -------------
	var reviewId int

	err = runtime.BindStyledParameter("simple", false, "review_id", c.Param("review_id"), &reviewId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter review_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteReviewsReviewIdParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteReviewsReviewId(c, reviewId, params)
}

// GetReviewsReviewId operation middleware
func (siw *ServerInterfaceWrapper) GetReviewsReviewId(c *gin.Context) {

	var err error

	// ------------- Path parameter "review_id" -------------
	var reviewId int

	err = runtime.BindStyledParameter("simple", false, "review_id", c.Param("review_id"), &reviewId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter review_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetReviewsReviewIdParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetReviewsReviewId(c, reviewId, params)
}

// PutReviewsReviewId operation middleware
func (siw *ServerInterfaceWrapper) PutReviewsReviewId(c *gin.Context) {

	var err error

	// ------------- Path parameter "review_id" -------------
	var reviewId int

	err = runtime.BindStyledParameter("simple", false, "review_id", c.Param("review_id"), &reviewId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter review_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutReviewsReviewIdParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutReviewsReviewId(c, reviewId, params)
}

// GetReviewsReviewIdNotes operation middleware
func (siw *ServerInterfaceWrapper) GetReviewsReviewIdNotes(c *gin.Context) {

	var err error

	// ------------- Path parameter "review_id" -------------
	var reviewId int

	err = runtime.BindStyledParameter("simple", false, "review_id", c.Param("review_id"), &reviewId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter review_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetReviewsReviewIdNotesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "last_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "last_id", c.Request.URL.Query(), &params.LastId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter last_id: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetReviewsReviewIdNotes(c, reviewId, params)
}

// GetReviewsReviewIdReactions operation middleware
func (siw *ServerInterfaceWrapper) GetReviewsReviewIdReactions(c *gin.Context) {

	var err error

	// ------------- Path parameter "review_id" -------------
	var reviewId int

	err = runtime.BindStyledParameter("simple", false, "review_id", c.Param("review_id"), &reviewId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter review_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetReviewsReviewIdReactionsParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetReviewsReviewIdReactions(c, reviewId, params)
}

// PostReviewsReviewIdReactions operation middleware
func (siw *ServerInterfaceWrapper) PostReviewsReviewIdReactions(c *gin.Context) {

	var err error

	// ------------- Path parameter "review_id" -------------
	var reviewId int

	err = runtime.BindStyledParameter("simple", false, "review_id", c.Param("review_id"), &reviewId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter review_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostReviewsReviewIdReactionsParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostReviewsReviewIdReactions(c, reviewId, params)
}

// GetReviewsReviewIdReactionsMe operation middleware
func (siw *ServerInterfaceWrapper) GetReviewsReviewIdReactionsMe(c *gin.Context) {

	var err error

	// ------------- Path parameter "review_id" -------------
	var reviewId int

	err = runtime.BindStyledParameter("simple", false, "review_id", c.Param("review_id"), &reviewId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter review_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetReviewsReviewIdReactionsMeParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetReviewsReviewIdReactionsMe(c, reviewId, params)
}

// PostSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) PostSubscriptions(c *gin.Context) {

	var err error

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostSubscriptionsParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSubscriptions(c, params)
}

// DeleteSubscriptionsFollowedId operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubscriptionsFollowedId(c *gin.Context) {

	var err error

	// ------------- Path parameter "followed_id" -------------
	var followedId UUID

	err = runtime.BindStyledParameter("simple", false, "followed_id", c.Param("followed_id"), &followedId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter followed_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteSubscriptionsFollowedIdParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteSubscriptionsFollowedId(c, followedId, params)
}

// GetSubscriptionsFollowedId operation middleware
func (siw *ServerInterfaceWrapper) GetSubscriptionsFollowedId(c *gin.Context) {

	var err error

	// ------------- Path parameter "followed_id" -------------
	var followedId UUID

	err = runtime.BindStyledParameter("simple", false, "followed_id", c.Param("followed_id"), &followedId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter followed_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriptionsFollowedIdParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSubscriptionsFollowedId(c, followedId, params)
}

// PutSubscriptionsFollowedId operation middleware
func (siw *ServerInterfaceWrapper) PutSubscriptionsFollowedId(c *gin.Context) {

	var err error

	// ------------- Path parameter "followed_id" -------------
	var followedId UUID

	err = runtime.BindStyledParameter("simple", false, "followed_id", c.Param("followed_id"), &followedId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter followed_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutSubscriptionsFollowedIdParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutSubscriptionsFollowedId(c, followedId, params)
}

// GetTracksTrackIdStats operation middleware
func (siw *ServerInterfaceWrapper) GetTracksTrackIdStats(c *gin.Context) {

	var err error

	// ------------- Path parameter "track_id" -------------
	var trackId string

	err = runtime.BindStyledParameter("simple", false, "track_id", c.Param("track_id"), &trackId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter track_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTracksTrackIdStatsParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTracksTrackIdStats(c, trackId, params)
}

// PostUsers operation middleware
func (siw *ServerInterfaceWrapper) PostUsers(c *gin.Context) {

	var err error

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostUsersParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUsers(c, params)
}

// GetUsersProfiles operation middleware
func (siw *ServerInterfaceWrapper) GetUsersProfiles(c *gin.Context) {

	var err error

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersProfilesParams

	// ------------- Optional query parameter "nickname_query" -------------

	err = runtime.BindQueryParameter("form", true, false, "nickname_query", c.Request.URL.Query(), &params.NicknameQuery)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter nickname_query: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "last_uuid" -------------

	err = runtime.BindQueryParameter("form", true, false, "last_uuid", c.Request.URL.Query(), &params.LastUuid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter last_uuid: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersProfiles(c, params)
}

// GetUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UUID

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersUserIdParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersUserId(c, userId, params)
}

// PutUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) PutUsersUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UUID

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutUsersUserIdParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutUsersUserId(c, userId, params)
}

// PostUsersUserIdBlock operation middleware
func (siw *ServerInterfaceWrapper) PostUsersUserIdBlock(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UUID

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostUsersUserIdBlockParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUsersUserIdBlock(c, userId, params)
}

// GetUsersUserIdProfile operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserIdProfile(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UUID

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersUserIdProfileParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersUserIdProfile(c, userId, params)
}

// PutUsersUserIdProfile operation middleware
func (siw *ServerInterfaceWrapper) PutUsersUserIdProfile(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UUID

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutUsersUserIdProfileParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutUsersUserIdProfile(c, userId, params)
}

// GetUsersUserIdStats operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserIdStats(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UUID

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersUserIdStatsParams

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersUserIdStats(c, userId, params)
}

// GetUsersUserIdSubscribers operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserIdSubscribers(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UUID

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersUserIdSubscribersParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "last_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "last_id", c.Request.URL.Query(), &params.LastId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter last_id: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersUserIdSubscribers(c, userId, params)
}

// GetUsersUserIdSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserIdSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UUID

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ActorAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersUserIdSubscriptionsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "last_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "last_id", c.Request.URL.Query(), &params.LastId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter last_id: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "actor" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("actor")]; found {
		var Actor Actor
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for actor, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "actor", runtime.ParamLocationHeader, valueList[0], &Actor)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter actor: %w", err), http.StatusBadRequest)
			return
		}

		params.Actor = &Actor

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersUserIdSubscriptions(c, userId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth/login", wrapper.PostAuthLogin)
	router.POST(options.BaseURL+"/auth/logout", wrapper.PostAuthLogout)
	router.POST(options.BaseURL+"/auth/register", wrapper.PostAuthRegister)
	router.GET(options.BaseURL+"/events", wrapper.GetEvents)
	router.POST(options.BaseURL+"/events", wrapper.PostEvents)
	router.GET(options.BaseURL+"/events/:event_id", wrapper.GetEventsEventId)
	router.PUT(options.BaseURL+"/events/:event_id", wrapper.PutEventsEventId)
	router.POST(options.BaseURL+"/events/:event_id/participate", wrapper.PostEventsEventIdParticipate)
	router.POST(options.BaseURL+"/notes", wrapper.PostNotes)
	router.DELETE(options.BaseURL+"/notes/:note_id", wrapper.DeleteNotesNoteId)
	router.GET(options.BaseURL+"/notes/:note_id", wrapper.GetNotesNoteId)
	router.PUT(options.BaseURL+"/notes/:note_id", wrapper.PutNotesNoteId)
	router.POST(options.BaseURL+"/photos", wrapper.PostPhotos)
	router.DELETE(options.BaseURL+"/photos/:photo_id", wrapper.DeletePhotosPhotoId)
	router.GET(options.BaseURL+"/photos/:photo_id", wrapper.GetPhotosPhotoId)
	router.GET(options.BaseURL+"/playlists/:playlist_id/notes", wrapper.GetPlaylistsPlaylistIdNotes)
	router.DELETE(options.BaseURL+"/reactions/:reaction_id", wrapper.DeleteReactionsReactionId)
	router.PUT(options.BaseURL+"/reactions/:reaction_id", wrapper.PutReactionsReactionId)
	router.POST(options.BaseURL+"/reviews", wrapper.PostReviews)
	router.GET(options.BaseURL+"/reviews/list", wrapper.GetReviewsList)
	router.GET(options.BaseURL+"/reviews/subscriptions", wrapper.GetReviewsSubscriptions)
	router.DELETE(options.BaseURL+"/reviews/:review_id", wrapper.DeleteReviewsReviewId)
	router.GET(options.BaseURL+"/reviews/:review_id", wrapper.GetReviewsReviewId)
	router.PUT(options.BaseURL+"/reviews/:review_id", wrapper.PutReviewsReviewId)
	router.GET(options.BaseURL+"/reviews/:review_id/notes", wrapper.GetReviewsReviewIdNotes)
	router.GET(options.BaseURL+"/reviews/:review_id/reactions", wrapper.GetReviewsReviewIdReactions)
	router.POST(options.BaseURL+"/reviews/:review_id/reactions", wrapper.PostReviewsReviewIdReactions)
	router.GET(options.BaseURL+"/reviews/:review_id/reactions/me", wrapper.GetReviewsReviewIdReactionsMe)
	router.POST(options.BaseURL+"/subscriptions", wrapper.PostSubscriptions)
	router.DELETE(options.BaseURL+"/subscriptions/:followed_id", wrapper.DeleteSubscriptionsFollowedId)
	router.GET(options.BaseURL+"/subscriptions/:followed_id", wrapper.GetSubscriptionsFollowedId)
	router.PUT(options.BaseURL+"/subscriptions/:followed_id", wrapper.PutSubscriptionsFollowedId)
	router.GET(options.BaseURL+"/tracks/:track_id/stats", wrapper.GetTracksTrackIdStats)
	router.POST(options.BaseURL+"/users", wrapper.PostUsers)
	router.GET(options.BaseURL+"/users/profiles", wrapper.GetUsersProfiles)
	router.GET(options.BaseURL+"/users/:user_id", wrapper.GetUsersUserId)
	router.PUT(options.BaseURL+"/users/:user_id", wrapper.PutUsersUserId)
	router.POST(options.BaseURL+"/users/:user_id/block", wrapper.PostUsersUserIdBlock)
	router.GET(options.BaseURL+"/users/:user_id/profile", wrapper.GetUsersUserIdProfile)
	router.PUT(options.BaseURL+"/users/:user_id/profile", wrapper.PutUsersUserIdProfile)
	router.GET(options.BaseURL+"/users/:user_id/stats", wrapper.GetUsersUserIdStats)
	router.GET(options.BaseURL+"/users/:user_id/subscribers", wrapper.GetUsersUserIdSubscribers)
	router.GET(options.BaseURL+"/users/:user_id/subscriptions", wrapper.GetUsersUserIdSubscriptions)
}
